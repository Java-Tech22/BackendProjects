package com.spring.security.util;

import java.time.Instant;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.security.oauth2.jose.jws.MacAlgorithm;
import org.springframework.security.oauth2.jwt.JwsHeader;
import org.springframework.security.oauth2.jwt.JwtClaimsSet;
import org.springframework.security.oauth2.jwt.JwtEncoderParameters;
import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;
import org.springframework.stereotype.Component;

import com.nimbusds.jose.jwk.source.ImmutableSecret;
import com.spring.security.entity.AppUser;

@Component
public class Utility {
	
	@Value("${security.jwt.secret-key}")
	private String jwtSecretKey;

	@Value("${security.jwt.issuer}")
	private String jwtIssuer;
	
	@Bean
	public String createToken(AppUser appUser) {
		Instant now = Instant.now();

		JwtClaimsSet claims=  JwtClaimsSet.builder().issuer(jwtIssuer)
				.issuedAt(now).expiresAt(now.plusSeconds(24*3600))
				.subject(appUser.getUserName())
				.claim("role", appUser.getRole()).build();


		NimbusJwtEncoder encoder = new NimbusJwtEncoder(new ImmutableSecret<>(jwtSecretKey.getBytes()));

		JwtEncoderParameters params = JwtEncoderParameters.from(JwsHeader.with(MacAlgorithm.HS256).build(), claims);

		return encoder.encode(params).getTokenValue();
	}


}
