  package com.spring.security.config;
  
  import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import
  org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import
  org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.
  EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import
  org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.spring.security.service.UserService;
import com.spring.security.service.UserServiceImpl;

import io.jsonwebtoken.security.MacAlgorithm;
  
 /**
	  Never disable CSRF protection while leaving session management enabled! Doing
	  so will open you up to a Cross-Site Request Forgery attack./
	*/	  
		  
	  @Configuration
	  
	  @EnableWebSecurity 
	  public class SecurityConfig {
		  
		
		  @Value("${security.jwt.secret-key}")
		  private String jwtSecretKey;
		  
		  @Autowired
		  UserServiceImpl userService;
		  @Autowired
		  JwtTokenFilter jwtAuthenticationFilter;
		  
		  
		  
	@Bean PasswordEncoder passwordEncoder () {
		return new BCryptPasswordEncoder();
	}
	  
	@Bean public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception { 
		   http.csrf(AbstractHttpConfigurer::disable)
				  .authorizeHttpRequests(request -> request
						  .requestMatchers("/").permitAll()
						  .requestMatchers("/register").permitAll()
						  .requestMatchers("/login").permitAll()
						  .requestMatchers("/admin").permitAll()
						  .requestMatchers("/client").permitAll()
						  .anyRequest().authenticated())
				  .oauth2ResourceServer(oauth2->oauth2.jwt(Customizer.withDefaults()))
				  .sessionManagement(manager -> manager.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
				  /*.authenticationProvider(authenticationProvider())
				  .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);*/
	  return http.build();
	  
	  }
	
	@Bean 
	public AuthenticationProvider authenticationProvider()  {
		DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
		authenticationProvider.setUserDetailsService(userService);
		authenticationProvider.setPasswordEncoder(passwordEncoder());
		return authenticationProvider;
	}
	
	@Bean AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
		return config.getAuthenticationManager();
	}
	
	@Bean 
	public JwtDecoder jwtDecoder() {
		var secretKey = new SecretKeySpec(jwtSecretKey.getBytes(), "");
		return NimbusJwtDecoder.withSecretKey(secretKey)
				.macAlgorithm(MacAlgorithm.HS256).build();
		
	}
	
}