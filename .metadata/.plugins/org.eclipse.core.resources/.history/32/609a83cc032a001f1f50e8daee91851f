  package com.spring.security.config;
  
  import org.springframework.context.annotation.Bean;
import
  org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import
  org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.
  EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import
  org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
  
 /**
	  Never disable CSRF protection while leaving session management enabled! Doing
	  so will open you up to a Cross-Site Request Forgery attack./
	*/	  
		  
	  @Configuration
	  
	  @EnableWebSecurity public class SecurityConfig {
		  
		  
		  
		  
	@Bean PasswordEncoder passwordEncoder () {
		return new BCryptPasswordEncoder();
	}
	  
	@Bean public SecurityFilterChain securityFilterChain(HttpSecurity http)
	  throws Exception { 
		  return http.csrf(AbstractHttpConfigurer::disable)
				  .authorizeHttpRequests(request -> request
						  .requestMatchers("/auth/**").permitAll()
						  .requestMatchers("/admin/**").hasAnyAuthority("Preeti","admin","user")
						  .anyRequest().authenticated())
				  .sessionManagement(manager -> manager.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
				  .authenticationProvider(authenticationProvider())
				  .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)
				);
	  
	  
	  }
		 